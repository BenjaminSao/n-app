{"version":3,"file":"page-manager.js","sourceRoot":"","sources":["../../src/core/page-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport { Container } from \"@nivinjoseph/n-ject\";\nimport { PageRegistration } from \"./page-registration\";\nimport { ApplicationException } from \"@nivinjoseph/n-exception\";\nimport { Page } from \"./page\";\nimport { PageTreeBuilder } from \"./page-tree-builder\";\nimport { Resolver, Resolution } from \"./resolve\";\n\n\nexport class PageManager\n{\n    private readonly _vueRouter: any;\n    private readonly _container: Container;\n    private readonly _pageViewModelClasses = new Array<Function>();\n    private readonly _registrations = new Array<PageRegistration>();\n    private readonly _resolvers = new Array<string>();\n    private _vueRouterInstance: any = null;\n    private _initialRoute: string = null;\n    private _unknownRoute: string = null;\n    private _defaultPageTitle: string = null;\n    private _defaultPageMetas: Array<{ name: string; content: string; }> = null;\n    private _useHistoryMode: boolean = false;\n\n\n    public get useHistoryMode(): boolean { return this._useHistoryMode; }\n    public get vueRouterInstance(): any { return this._vueRouterInstance; }\n\n\n    public constructor(vueRouter: any, container: Container)\n    {\n        given(vueRouter, \"vueRouter\").ensureHasValue();\n        given(container, \"container\").ensureHasValue();\n        this._vueRouter = vueRouter;\n        this._container = container;\n    }\n\n\n    public registerPages(...pageViewModelClasses: Function[]): void\n    {\n        this._pageViewModelClasses.push(...pageViewModelClasses);\n    }\n\n    public useAsInitialRoute(route: string): void\n    {\n        given(route, \"route\").ensureHasValue().ensureIsString();\n        this._initialRoute = route.trim();\n    }\n\n    public useAsUnknownRoute(route: string): void\n    {\n        given(route, \"route\").ensureHasValue().ensureIsString();\n        this._unknownRoute = route.trim();\n    }\n\n    public useAsDefaultPageTitle(title: string): void\n    {\n        given(title, \"title\").ensureHasValue().ensureIsString();\n        this._defaultPageTitle = title.trim();\n    }\n\n    public useAsDefaultPageMetadata(metas: ReadonlyArray<{ name: string; content: string; }>): void\n    {\n        given(metas, \"metas\").ensureHasValue().ensureIsArray().ensure(t => t.length > 0);\n        this._defaultPageMetas = [...metas];\n    }\n\n    public useHistoryModeRouting(): void\n    {\n        this._useHistoryMode = true;\n    }\n\n    public bootstrap(): void\n    {\n        this._pageViewModelClasses.forEach(t => this.registerPage(t));\n        if (this._registrations.length === 0)\n            return;\n\n        this.createRouting();\n        this.configureResolves();\n        this.configureInitialRoute();\n    }\n    \n\n    private registerPage(pageViewModelClass: Function): void\n    {\n        let registration = new PageRegistration(pageViewModelClass, this._defaultPageTitle, this._defaultPageMetas);\n\n        if (this._registrations.some(t => t.name === registration.name))\n            throw new ApplicationException(`Duplicate Page registration with name '${registration.name}'.`);\n\n        if (this._registrations.some(t => t.route.routeKey === registration.route.routeKey))\n            throw new ApplicationException(`Route conflict detected for Page registration with name '${registration.name}'`);\n\n        this._registrations.push(registration);\n        this._container.registerTransient(registration.name, registration.viewModel);\n        if (registration.resolvers && registration.resolvers.length > 0)\n            registration.resolvers.forEach(t =>\n            {\n                if (this._resolvers.contains(t.name))\n                    return;\n\n                this._container.registerTransient(t.name, t.value);\n                this._resolvers.push(t.name);\n            });\n    }\n\n    private createRouting(): void\n    {\n        let pageTree = this.createPageTree();\n        let vueRouterRoutes = pageTree.map(t => t.createVueRouterRoute());\n        // if (this._initialRoute)\n        //     vueRouterRoutes.push({ path: \"/\", redirect: this._initialRoute });\n        if (this._unknownRoute)\n            vueRouterRoutes.push({ path: \"*\", redirect: this._unknownRoute });\n        let vueRouter = this._vueRouter;\n        const routerOptions: any = {\n            routes: vueRouterRoutes,\n            // @ts-ignore\n            scrollBehavior: function (to: any, from: any, savedPosition: any)\n            {\n                return { x: 0, y: 0 };\n            }\n        };\n        if (this._useHistoryMode)\n            routerOptions.mode = \"history\";\n        this._vueRouterInstance = new vueRouter(routerOptions);\n    }\n\n    private createPageTree(): ReadonlyArray<Page>\n    {\n        let root = new Page(\"/\", null);\n        let treeBuilder = new PageTreeBuilder(root, this._registrations);\n        return treeBuilder.build();\n    }\n\n    private configureResolves(): void\n    {\n        // @ts-ignore\n        this._vueRouterInstance.beforeEach((to: any, from: any, next: any) =>\n        {\n            const registrationName = to.name + \"ViewModel\";\n            const registration = this._registrations.find(t => t.name === registrationName);\n            registration.resolvedValues = null;\n            if (registration.resolvers && registration.resolvers.length > 0)\n            {\n                const resolvers = registration.resolvers.map(t => this._container.resolve<Resolver>(t.name));\n                resolvers\n                    .mapAsync(async t =>\n                    {\n                        try \n                        {\n                            const resolution = await t.resolve(from, to);\n                            return resolution;\n                        }\n                        catch (error)\n                        {\n                            return false;\n                        }\n                    })\n                    .then(resolutions =>\n                    {\n                        if (resolutions.some(t => t === false))\n                        {\n                            next(false);\n                            return;\n                        }\n                        \n                        const redirectRes = resolutions.find(t => !!(<Resolution>t).redirect) as Resolution;\n                        if (redirectRes && redirectRes.redirect)\n                        {\n                            next(redirectRes.redirect);\n                            return;\n                        }\n                        \n                        registration.resolvedValues = resolutions.filter(t => (<any>t).value != null).map(t => (<any>t).value);\n                        next();\n                    })\n                    .catch(() =>\n                    {\n                        next(false);\n                    });\n            }\n            else\n            {\n                next();\n            }\n        });\n    }\n\n    private configureInitialRoute(): void\n    {\n        if (!this._initialRoute || this._initialRoute.isEmptyOrWhiteSpace())\n            return;\n\n        if (this._useHistoryMode)\n        {\n            if (!window.location.pathname || window.location.pathname.toString().isEmptyOrWhiteSpace() ||\n                window.location.pathname.toString().trim() === \"/\" || window.location.pathname.toString().trim() === \"null\")\n                this._vueRouterInstance.replace(this._initialRoute);\n\n            return;\n        }\n\n        if (!window.location.hash)\n        {\n            if (this._initialRoute)\n                window.location.hash = \"#\" + this._initialRoute;\n        }\n        else\n        {\n            let hashVal = window.location.hash.trim();\n            if (hashVal.length === 1)\n            {\n                if (this._initialRoute)\n                    window.location.hash = \"#\" + this._initialRoute;\n            }\n            else\n            {\n                hashVal = hashVal.substr(1);\n                if (hashVal === \"/\")\n                {\n                    if (this._initialRoute)\n                        window.location.hash = \"#\" + this._initialRoute;\n                }\n            }\n        }\n    }\n}\n\n"]}