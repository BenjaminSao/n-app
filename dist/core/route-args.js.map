{"version":3,"file":"route-args.js","sourceRoot":"","sources":["../../src/core/route-args.ts"],"names":[],"mappings":"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","sourcesContent":["import { RouteInfo } from \"./route-info\";\nimport { HttpException } from \"./http-exception\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\n\n\nexport class RouteArgs\n{\n    private readonly _pathArgs: object;\n    private readonly _queryArgs: object;\n    private readonly _routeArgs: Array<any>;\n    \n    \n    public get pathArgs(): object { return this._pathArgs; }\n    public get queryArgs(): object { return this._queryArgs; }\n    public get routeArgs(): Array<any> { return this._routeArgs; }\n    \n    \n    public constructor(pathArgs: object, queryArgs: object, routeArgs: Array<any>)\n    {\n        given(pathArgs, \"pathArgs\").ensureHasValue().ensureIsObject();\n        given(queryArgs, \"queryArgs\").ensureHasValue().ensureIsObject();\n        given(routeArgs, \"routeArgs\").ensureHasValue().ensureIsArray();\n        \n        this._pathArgs = pathArgs;\n        this._queryArgs = queryArgs;\n        this._routeArgs = routeArgs;\n    }\n    \n    \n    public equals(comparison: RouteArgs): boolean\n    {\n        let current = this.createParamsArray(this);\n        let compare = this.createParamsArray(comparison);\n        \n        return current.equals(compare);\n    }\n    \n    \n    public static create(route: RouteInfo, ctx: any): RouteArgs\n    {\n        // console.log(\"ctx\", ctx);\n        \n        let queryArgs = Object.assign({}, ctx.query);\n        let pathArgs = Object.assign({}, ctx.params);\n        let model: { [index: string]: any } = {};\n\n        for (let key in queryArgs)\n        {\n            let routeParam = route.findRouteParam(key);\n            if (routeParam)\n            {\n                let parsed = routeParam.parseParam(queryArgs[key]);\n                model[routeParam.paramKey] = parsed;\n                queryArgs[key] = parsed;\n            }\n            else\n            {\n                let value: string = queryArgs[key];\n                if (value === undefined || value == null || value.isEmptyOrWhiteSpace() || value.trim().toLowerCase() === \"null\")\n                    queryArgs[key] = null;\n            }\n        }\n\n        for (let key in pathArgs)\n        {\n            let routeParam = route.findRouteParam(key);\n            // if (!routeParam)\n            //     throw new HttpException(404);\n\n            // instead we just skip it. This is because keys in pathParams will include parent page route pathParams\n\n            if (!routeParam)\n                continue;\n\n            let parsed = routeParam.parseParam(pathArgs[key]);\n            model[routeParam.paramKey] = parsed;\n            pathArgs[key] = parsed;\n        }\n\n        let routeArgs = [];\n        for (let routeParam of route.params)\n        {\n            let value = model[routeParam.paramKey];\n            if (value === undefined || value === null)\n            {\n                if (!routeParam.isOptional)\n                    throw new HttpException(404);\n\n                value = null;\n            }\n            routeArgs.push(value);\n        }\n        \n        return new RouteArgs(pathArgs, queryArgs, routeArgs);\n    }\n    \n    \n    private createParamsArray(routeArgs: RouteArgs): Array<[string, any]>\n    {\n        let obj: Object = Object.assign({}, routeArgs._pathArgs, routeArgs._queryArgs);\n        let params = new Array<[string, any]>();\n        for (let key in obj)\n            params.push([key, obj.getValue(key)]);\n        return params.orderBy(t => t[0]);\n    }\n}"]}