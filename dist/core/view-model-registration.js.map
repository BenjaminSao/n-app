{"version":3,"file":"view-model-registration.js","sourceRoot":"","sources":["../../src/core/view-model-registration.ts"],"names":[],"mappings":";;AAAA,6CAAoC;AACpC,iBAAe;AACf,iCAAoC;AACpC,yCAA4C;AAC5C,6CAAmD;AAGnD;IASI,IAAW,IAAI,KAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAChD,IAAW,SAAS,KAAe,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC5D,IAAW,QAAQ,KAAa,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACxD,IAAW,UAAU,KAAa,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAG5D,YAAmB,SAAmB;QAElC,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAE/C,IAAI,CAAC,KAAK,GAAY,SAAU,CAAC,WAAW,EAAE,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAE5B,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,yBAAc,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YACxD,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,yBAAc,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7E,IAAI,CACJ,CAAC;YACG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,iBAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;gBACrD,MAAM,IAAI,kCAAoB,CAAC,aAAa,IAAI,CAAC,KAAK,6CAA6C,CAAC,CAAC;YAEzG,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,iBAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,2CAA2C;YAC7G,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACjD,CAAC;IACL,CAAC;IAGO,kBAAkB;QAEtB,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAErE,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;YAC5C,MAAM,IAAI,kCAAoB,CAAC,oBAAoB,UAAU,4BAA4B,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAE3G,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC;IAC5B,CAAC;CACJ;AA5CD,sDA4CC","sourcesContent":["import { given } from \"n-defensive\";\nimport \"n-ext\";\nimport { viewSymbol } from \"./view\";\nimport { templateSymbol } from \"./template\";\nimport { ApplicationException } from \"n-exception\";\n\n\nexport class ViewModelRegistration\n{\n    private readonly _name: string;\n    private readonly _viewModel: Function;\n    private readonly _template: string;\n    private readonly _view: string;\n    private readonly _templateId: string;\n    \n    \n    public get name(): string { return this._name; }\n    public get viewModel(): Function { return this._viewModel; }\n    public get template(): string { return this._template; }\n    public get templateId(): string { return this._templateId; }\n    \n    \n    public constructor(viewModel: Function)\n    {\n        given(viewModel, \"viewModel\").ensureHasValue();\n        \n        this._name = (<Object>viewModel).getTypeName();\n        this._viewModel = viewModel;\n        \n        if (Reflect.hasOwnMetadata(templateSymbol, this._viewModel))\n            this._template = Reflect.getOwnMetadata(templateSymbol, this._viewModel);\n        else\n        {\n            if (!Reflect.hasOwnMetadata(viewSymbol, this._viewModel))\n                throw new ApplicationException(`ViewModel'${this._name}' does not have @template or @view applied.`);\n\n            this._view = Reflect.getOwnMetadata(viewSymbol, this._viewModel); // does not have to include .html extension\n            this._templateId = this.generateTemplateId();\n        }\n    }\n    \n    \n    private generateTemplateId(): string\n    {\n        let templateId = this._view.replace(\".html\", \"\").split(\"-\").join(\"\");\n        \n        if (document.getElementById(templateId) == null)\n            throw new ApplicationException(`Template with id ${templateId} not found for ViewModel ${this._name}`);    \n        \n        return \"#\" + templateId;\n    }\n}"]}