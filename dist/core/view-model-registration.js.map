{"version":3,"file":"view-model-registration.js","sourceRoot":"","sources":["../../src/core/view-model-registration.ts"],"names":[],"mappings":";;AAAA,0DAAiD;AACjD,8BAA4B;AAC5B,iCAAoC;AACpC,yCAA4C;AAC5C,0DAAgE;AAGhE;IASI,IAAW,IAAI,KAAa,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAChD,IAAW,SAAS,KAAe,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC5D,IAAW,QAAQ,KAAa,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACxD,IAAW,UAAU,KAAa,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAG5D,YAAsB,SAAmB;QAErC,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAE/C,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,GAAY,SAAU,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,gCAAgC;QACzG,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAE5B,IAAI,OAAO,CAAC,cAAc,CAAC,yBAAc,EAAE,IAAI,CAAC,UAAU,CAAC;YACvD,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,yBAAc,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;aAE7E;YACI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,iBAAU,EAAE,IAAI,CAAC,UAAU,CAAC;gBACpD,MAAM,IAAI,kCAAoB,CAAC,aAAa,IAAI,CAAC,IAAI,6CAA6C,CAAC,CAAC;YAExG,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,iBAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,2CAA2C;YAC7G,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAChD;IACL,CAAC;IAGO,kBAAkB;QAEtB,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAErE,IAAI,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,IAAI;YAC3C,MAAM,IAAI,kCAAoB,CAAC,oBAAoB,UAAU,4BAA4B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAE1G,OAAO,GAAG,GAAG,UAAU,CAAC;IAC5B,CAAC;CACJ;AA5CD,sDA4CC","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\nimport { viewSymbol } from \"./view\";\nimport { templateSymbol } from \"./template\";\nimport { ApplicationException } from \"@nivinjoseph/n-exception\";\n\n\nexport abstract class ViewModelRegistration\n{\n    private readonly _name: string;\n    private readonly _viewModel: Function;\n    private readonly _template: string;\n    private readonly _view: string;\n    private readonly _templateId: string;\n    \n    \n    public get name(): string { return this._name; }\n    public get viewModel(): Function { return this._viewModel; }\n    public get template(): string { return this._template; }\n    public get templateId(): string { return this._templateId; }\n    \n    \n    protected constructor(viewModel: Function)\n    {\n        given(viewModel, \"viewModel\").ensureHasValue();\n        \n        this._name = (\" \" + (<Object>viewModel).getTypeName().trim()).substr(1); // Shrey: Safari de-optimization\n        this._viewModel = viewModel;\n        \n        if (Reflect.hasOwnMetadata(templateSymbol, this._viewModel))\n            this._template = Reflect.getOwnMetadata(templateSymbol, this._viewModel);\n        else\n        {\n            if (!Reflect.hasOwnMetadata(viewSymbol, this._viewModel))\n                throw new ApplicationException(`ViewModel'${this.name}' does not have @template or @view applied.`);\n\n            this._view = Reflect.getOwnMetadata(viewSymbol, this._viewModel); // does not have to include .html extension\n            this._templateId = this.generateTemplateId();\n        }\n    }\n    \n    \n    private generateTemplateId(): string\n    {\n        let templateId = this._view.replace(\".html\", \"\").split(\"-\").join(\"\");\n        \n        if (document.getElementById(templateId) == null)\n            throw new ApplicationException(`Template with id ${templateId} not found for ViewModel ${this.name}`);    \n        \n        return \"#\" + templateId;\n    }\n}"]}