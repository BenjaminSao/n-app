{"version":3,"file":"component-factory.js","sourceRoot":"","sources":["../../src/core/component-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"n-defensive\";\nimport { Container } from \"n-ject\";\nimport { Utils } from \"./utils\";\nimport { ViewModelRegistration } from \"./view-model-registration\";\nimport { ComponentRegistration } from \"./component-registration\";\n\n\nexport class ComponentFactory\n{\n    private readonly _container: Container;\n    \n    \n    public constructor(container: Container)\n    {\n        given(container, \"container\").ensureHasValue();\n        this._container = container;\n    }\n    \n    \n    public create(registration: ViewModelRegistration): Object\n    {\n        given(registration, \"registration\").ensureHasValue();\n        \n        let component: any = {};\n        \n        component.template = registration.templateId;\n        \n        const container = this._container;\n        component.data = function ()\n        {\n            let vueVm = this;\n            let vm = container.resolve<any>(registration.name);\n            let data = { vm: vm };\n            let methods: { [index: string]: any } = {};\n            let computed: { [index: string]: any } = {};\n\n            let propertyInfos = Utils.getPropertyInfos(vm);\n            for (let info of propertyInfos)\n            {\n                if (typeof (info.descriptor.value) === \"function\")\n                    methods[info.name] = info.descriptor.value.bind(vm);\n                else if (info.descriptor.get || info.descriptor.set)\n                {\n                    computed[info.name] = {\n                        get: info.descriptor.get ? info.descriptor.get.bind(vm) : undefined,\n                        set: info.descriptor.set ? info.descriptor.set.bind(vm) : undefined\n                    };\n                }\n            }\n\n            vueVm.$options.methods = methods;\n            vueVm.$options.computed = computed;\n            vm._ctx = vueVm;\n\n            return data;\n        };\n        \n        let componentRegistration = registration as ComponentRegistration;\n        if (componentRegistration.bindings && componentRegistration.bindings.length > 0)\n            component.props = componentRegistration.bindings;    \n        \n        component.beforeCreate = function ()\n        {\n            // console.log(\"executing beforeCreate\");\n            // console.log(this.vm);\n        };\n        \n        component.created = function ()\n        {\n            // console.log(\"executing created\");\n            // console.log(this.vm);\n            \n            if (this.vm.onCreate)\n                this.vm.onCreate();    \n        };\n        \n        component.beforeMount = function ()\n        {\n            // console.log(\"executing beforeMount\");\n            // console.log(this.vm);\n        };\n        \n        component.mounted = function ()\n        {\n            // console.log(\"executing mounted\");\n            // console.log(this.vm);\n        };\n        \n        component.beforeUpdate = function ()\n        {\n            // console.log(\"executing beforeUpdate\");\n            // console.log(this.vm);\n        };\n        \n        component.updated = function ()\n        {\n            // console.log(\"executing updated\");\n            // console.log(this.vm);\n        };\n        \n        component.beforeDestroy = function ()\n        {\n            // console.log(\"executing beforeDestroy\");\n            // console.log(this.vm);\n        };\n        \n        component.destroyed = function ()\n        {\n            // console.log(\"executing destroyed\");\n            // console.log(this.vm);\n            \n            if (this.vm.onDestroy)\n                this.vm.onDestroy(); \n        };\n        \n        return component;\n    }\n}"]}