{"version":3,"file":"default-dialog-service.js","sourceRoot":"","sources":["../../../src/services/dialog-service/default-dialog-service.ts"],"names":[],"mappings":"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","sourcesContent":["const jquery = require(\"./../../../vendor/jquery.js\");\nif (!jquery)\n    console.log(\"No jquery!!!\");\n    \nconst toastr = require(\"./../../../vendor/toastr.js\");\nif (!toastr)\n    console.log(\"No toastr!!!\");\n    \nconst Spinner = require(\"./../../../vendor/spin.js\");\nif (!Spinner)\n    console.log(\"No Spinner!!!\");    \n\n\nimport { DialogService } from \"./dialog-service\";\n\n\nexport class DefaultDialogService implements DialogService\n{\n    private readonly _accentColor: string = \"#000\";\n    private _loadingScreenCount = 0;\n    private _loadingScreen: any;\n    private _spinner: any;\n\n\n    constructor(accentColor: string)\n    {\n        if (accentColor)\n            this._accentColor = accentColor.trim();    \n        \n        toastr.options.timeOut = 4000;\n        toastr.options.positionClass = \"toast-bottom-right\";\n        toastr.options.newestOnTop = false;\n    }\n\n    // public static SetAccentColor(color: string): void\n    // {\n    //     DefaultDialogService._accentColor = color;\n    // }\n\n    public showLoadingScreen(): void\n    {\n        if (this._loadingScreenCount === 0)\n        {\n            if (!this._loadingScreen)\n            {\n                this.CreateLoadingScreen();\n            }\n\n            this._loadingScreen.show();\n            this._spinner.spin(document.getElementById(\"spinnerLocation\"));\n        }\n\n        this._loadingScreenCount++;\n    }\n\n    public hideLoadingScreen(): void\n    {\n        this._loadingScreenCount--;\n\n        if (this._loadingScreenCount < 0)\n            this._loadingScreenCount = 0;\n\n        if (this._loadingScreenCount === 0)\n        {\n            if (this._loadingScreen && this._spinner)\n            {\n                this._spinner.stop();\n                this._loadingScreen.hide();\n            }\n        }\n    }\n\n    public showMessage(message: string, title?: string): void\n    {\n        if (title)\n        {\n            toastr.info(message, title);\n        }\n        else\n        {\n            toastr.info(message);\n        }\n    }\n\n    public showSuccessMessage(message: string, title?: string): void\n    {\n        if (title)\n        {\n            toastr.success(message, title);\n        }\n        else\n        {\n            toastr.success(message);\n        }\n    }\n    \n    public showWarningMessage(message: string, title?: string): void\n    {\n        if (title)\n        {\n            toastr.warning(message, title);\n        }\n        else\n        {\n            toastr.warning(message);\n        }\n    }\n\n    public showErrorMessage(message: string, title?: string): void\n    {\n        if (title)\n        {\n            toastr.error(message, title);\n        }\n        else\n        {\n            toastr.error(message);\n        }\n    }\n\n    public clearMessages(): void\n    {\n        toastr.clear();\n    }\n\n\n    private CreateLoadingScreen(): void\n    {\n        this._loadingScreen = jquery(\"<div style='position:fixed;top:0;left:0;right:0;bottom:0;z-index:100000000;background-color:rgba(255, 255, 255, 0.1);'><div id='spinnerLocation' style='position:absolute;top:50%;left:50%;'></div></div>\")\n            .appendTo(jquery(\"body\"));\n\n        // var opts = {\n        //    lines: 13, // The number of lines to draw\n        //    length: 20, // The length of each line\n        //    width: 10, // The line thickness\n        //    radius: 30, // The radius of the inner circle\n        //    corners: 1, // Corner roundness (0..1)\n        //    rotate: 0, // The rotation offset\n        //    direction: 1, // 1: clockwise, -1: counterclockwise\n        //    color: '#FF7C00', //'#000', // #rgb or #rrggbb or array of colors\n        //    speed: 1, // Rounds per second\n        //    trail: 60, // Afterglow percentage\n        //    shadow: false, // Whether to render a shadow\n        //    hwaccel: false, // Whether to use hardware acceleration\n        //    className: 'spinner', // The CSS class to assign to the spinner\n        //    zIndex: 2e9, // The z-index (defaults to 2000000000)\n        //    top: 'auto', // Top position relative to parent in px\n        //    left: 'auto' // Left position relative to parent in px\n        // };\n\n\n        let opts = {\n            lines: 12, // The number of lines to draw\n            length: 10, // The length of each line\n            width: 4, // The line thickness\n            radius: 10, // The radius of the inner circle\n            corners: 1, // Corner roundness (0..1)\n            rotate: 0, // The rotation offset\n            direction: 1, // 1: clockwise, -1: counterclockwise\n            color: this._accentColor, // '#000', // #rgb or #rrggbb or array of colors\n            speed: 1, // Rounds per second\n            trail: 60, // Afterglow percentage\n            shadow: false, // Whether to render a shadow\n            hwaccel: false, // Whether to use hardware acceleration\n            className: \"spinner\", // The CSS class to assign to the spinner\n            zIndex: 2e9, // The z-index (defaults to 2000000000)\n            top: \"auto\", // Top position relative to parent in px\n            left: \"auto\" // Left position relative to parent in px\n        };\n\n        let target = document.getElementById(\"spinnerLocation\");\n        this._spinner = new Spinner(opts).spin(target);\n\n        this._spinner.stop();\n        this._loadingScreen.hide();\n    }\n}"]}